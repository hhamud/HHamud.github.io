#+title: Build
#+AUTHOR: Hamza Hamud
#+EMAIL: self@hamzahamud.com
#+DATE: [2024-01-10 Thu]
#+DESCRIPTION: Emacs Lisp configuration for blog publishing
#+KEYWORDS: emacs, blog, publishing, org-mode
#+LANGUAGE: en
#+PROPERTY: header-args :tangle build.el


Load the publishing system
#+begin_src emacs-lisp
(require 'package)
(setq package-user-dir (expand-file-name "./.packages"))
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src


Initialise the package system
#+begin_src emacs-lisp
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

Install dependencies
#+begin_src emacs-lisp
(package-install 'htmlize)
#+end_src


Load the publishing system
#+begin_src emacs-lisp
(require 'ox-publish)
#+end_src


Set the HTML-HEAD
#+begin_src emacs-lisp
(setq set-css "<link rel=\"stylesheet\" type=\"text/css\" href=\"/asset/css/style.css\"/><link rel=\"stylesheet\" href=\"/asset/css/prism.css\"/><script src=\"/asset/js/prism.js\"></script>")
#+end_src


This overrides the default backend filter for the src-block and changes the HTML template. This will also change the class to match Prism’s recommendations, which is language-*, where * is the language.
#+begin_src emacs-lisp
(defun my/org-html-src-block (src-block _contents info)
  "Transcode a SRC-BLOCK element from Org to HTML.
  CONTENTS holds the contents of the item.  INFO is a plist holding
  contextual information."
  (if (org-export-read-attribute :attr_html src-block :textarea)
      (org-html--textarea-block src-block)
    (let* ((lang (org-element-property :language src-block))
           (code (org-html-format-code src-block info))
           (label (let ((lbl (org-html--reference src-block info t)))
                    (if lbl (format " id=\"%s\"" lbl) "")))
           (klipsify  (and  (plist-get info :html-klipsify-src)
                            (member lang '("javascript" "js"
                                           "python" "scheme" "clojure" "php" "html" "shell" "rust")))))
      (if (not lang) (format "<pre class=\"example\"%s>\n%s</pre>" label code)
        (format "<div class=\"org-src-container\">\n%s%s\n</div>"
                ;; Build caption.
                (let ((caption (org-export-get-caption src-block)))
                  (if (not caption) ""
                    (let ((listing-number
                           (format
                            "<span class=\"listing-number\">%s </span>"
                            (format
                             (org-html--translate "Listing %d:" info)
                             (org-export-get-ordinal
                              src-block info nil #'org-html--has-caption-p)))))
                      (format "<label class=\"org-src-name\">%s%s</label>"
                              listing-number
                              (org-trim (org-export-data caption info))))))
                ;; Contents.
                ;; Changed HTML template to work with Prism.
                (if klipsify
                    (format "<pre><code class=\"src language-%s\"%s%s>%s</code></pre>"
                            lang
                            label
                            (if (string= lang "html")
                                " data-editor-type=\"html\""
                              "")
                            code)
                  (format "<pre><code class=\"src language-%s\"%s>%s</code></pre>"
                          lang label code)))))))
#+end_src

Next, a new backend that includes the new filter needs to be defined. According to org-mode’s documentation, we can do that by calling org-export-define-derived-backend, specifying the derived backend’s name and the derived backend’s parent as the first and second parametre, and modifying the :translate-alist property to include the new filter.
#+begin_src emacs-lisp
(org-export-define-derived-backend 'site-html
                                   'html
                                   :translate-alist
                                   '((src-block . my/org-html-src-block)))
#+end_src

Customise the HTML output by using our own scripts and styles without showing our validations links
#+begin_src emacs-lisp
(setq org-html-validation-link nil org-html-head-include-scripts nil
      org-html-head-include-default-style nil
      org-html-head set-css)
#+end_src


This function was created as a wrapper around ~org-html-publish-to-html~ to filter out any files that do not have the tag =#+SELECT_TAGS: publish=.
#+begin_src emacs-lisp
(defun my/org-publish (plist filename pub-dir)
  "Publish the file only if it contains the line '#+SELECT_TAGS: publish'."
  (with-temp-buffer
    (insert-file-contents filename)
    (goto-char (point-min))
    (if (re-search-forward "^#\\+SELECT_TAGS:.*\\bpublish\\b.*$" nil t)

        (org-publish-org-to 'site-html filename
                            (concat (when (> (length org-html-extension) 0) ".")
                                    (or (plist-get plist :html-extension)
                                        org-html-extension
                                        "html"))
                            plist pub-dir)
      (message "Skipping file not marked for publishing: %s" filename))))
#+end_src


Set the base directory for the files to be published from.
#+begin_src emacs-lisp
(setq org-base-directory "~/Documents/org/info")
#+end_src


Define the publishing project
- Include a table of contents
- Don't include author name
- Don't Include Emacs and Org versions in footer
- Don't include section numbers
- Don't include time stamp in file
#+begin_src emacs-lisp
(setq org-publish-project-alist
      (list
       (list "pages"
             :recursive nil
             :base-directory org-base-directory
             :publishing-function 'my/org-publish
             :publishing-directory "./public"
             :author "Hamza Hamud"
             :auto-sitemap t
             :sitemap-title "Posts"
             :sitemap-filename "index.org"
             :with-creator t
             :with-toc t
             :section-numbers nil
             :time-stamp-file nil)
       (list "static"
         :base-directory "./"
         :base-extension "css\\|txt\\|jpg\\|gif\\|png\\|js"
         :recursive t
         :publishing-directory  "./public"
         :publishing-function 'org-publish-attachment)
       (list "site" :components (list "pages" "static"))
))
#+end_src



Generate the site output
#+begin_src emacs-lisp
(org-publish-all t)
#+end_src


